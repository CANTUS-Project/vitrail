#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#--------------------------------------------------------------------------------------------------
# Program Name:           vitrail
# Program Description:    HTML/CSS/JavaScript user agent for the Cantus API.
#
# Filename:               devserver
# Purpose:                Script to concurrently run "babel" and the SimpleHTTPServer module.
#
# Copyright (C) 2015 Christopher Antila
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#--------------------------------------------------------------------------------------------------
'''
Script to concurrently run "watchify" and the SimpleHTTPServer module.
'''

from http import server
import pathlib
import subprocess


# list of the JS files that must be compiled with Watchify; it's input filename, then output filename
_COMPILE_WITH_WATCHIFY = [
    ('js/vitrail-init.js', 'js/vitrail.js'),
]


_PATH_TO_WATCHIFY = 'node_modules/watchify/bin/cmd.js'


def the_script():
    # see if we can find/use watchify
    watchify = pathlib.Path(_PATH_TO_WATCHIFY)
    if not watchify.exists():
        print('Could not find Watchify. Is it installed?')
        raise SystemExit(1)
    del watchify  # because this will be a long-running script

    # hold the Popen instances
    subprocesses = []

    try:
        # set up some Watchify instances
        for each_file in _COMPILE_WITH_WATCHIFY:
            print('Starting Watchify for {}'.format(each_file[0]))
            try:
                kummand = [_PATH_TO_WATCHIFY, each_file[0], '-o', each_file[1]]
                subprocesses.append(subprocess.Popen(kummand))
            except subprocess.CalledProcessError as cperr:
                print('Encountered the following error while starting Watchify:\n{}'.format(cperr))
                raise SystemExit(1)

        # now run the SimpleHTTPServer
        # we'll catch KeyboardInterrupt so we can try killing babel on the way out
        try:
            print('Starting the HTTPServer')
            server_address = ('', 8000)
            httpd = server.HTTPServer(server_address, server.SimpleHTTPRequestHandler)
            httpd.serve_forever()
        except KeyboardInterrupt:
            print('')

    finally:
        for each_instance in subprocesses:
            print('Terminating subprocess with PID {}'.format(each_instance.pid))
            each_instance.terminate()
            each_instance.wait(timeout=30)


if '__main__' == __name__:
    the_script()
else:
    print('This script is only intended to be run from a commandline.')
